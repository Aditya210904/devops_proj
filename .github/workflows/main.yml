name: Local CI-CD Pipeline

permissions:
  contents: read
  packages: write

on:
  push:
    branches: [ main ]

jobs:
  test:
    name: Run Unit Tests
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with: { python-version: '3.9' }
    - run: pip install -r requirements.txt
    - run: pytest

  build-and-push:
    name: Build and Push Docker Image
    runs-on: self-hosted
    needs: test
    steps:
    - uses: actions/checkout@v3
    - uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ghcr.io/aditya210904/devops_proj:latest

  deploy:
    name: Deploy to Local Docker Swarm
    runs-on: self-hosted
    needs: build-and-push
    steps:
    - uses: actions/checkout@v3
    
    - name: Login to GHCR for Terraform
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Pull Docker Image
      run: |
        echo "Pulling latest image..."
        docker pull ghcr.io/aditya210904/devops_proj:latest
        echo "Image pulled successfully"
        docker images | Select-String "ghcr.io/aditya210904/devops_proj"
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0
    
    - name: Deploy with Terraform
      run: |
        cd terraform
        terraform init
        terraform apply -auto-approve
    
    - name: Verify deployment
      run: |
        echo "Waiting for container to start..."
        Start-Sleep -Seconds 10
        echo "All running containers:"
        docker ps -a
        echo "Containers with 'web' in name:"
        docker ps -a --filter "name=web"
        echo "Checking if my-web-app container exists:"
        if (docker ps -a --filter "name=my-web-app" --format "table {{.Names}}" | Select-String "my-web-app") {
          echo "Container found, checking logs:"
          docker logs my-web-app --tail 20
        } else {
          echo "Container 'my-web-app' not found"
          echo "Available containers:"
          docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
        }